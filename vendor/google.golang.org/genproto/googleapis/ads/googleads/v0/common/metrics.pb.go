// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v0/common/metrics.proto

package common // import "google.golang.org/genproto/googleapis/ads/googleads/v0/common"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Metrics data.
type Metrics struct {
	// All conversions from interactions (as oppose to view through conversions)
	// divided by the number of ad interactions.
	AllConversionsFromInteractionsRate *wrappers.DoubleValue `protobuf:"bytes,65,opt,name=all_conversions_from_interactions_rate,json=allConversionsFromInteractionsRate,proto3" json:"all_conversions_from_interactions_rate,omitempty"`
	// The total value of all conversions.
	AllConversionsValue *wrappers.DoubleValue `protobuf:"bytes,66,opt,name=all_conversions_value,json=allConversionsValue,proto3" json:"all_conversions_value,omitempty"`
	// The total number of conversions. This includes "Conversions" plus
	// conversions that have their "Include in Conversions" setting unchecked.
	AllConversions *wrappers.DoubleValue `protobuf:"bytes,7,opt,name=all_conversions,json=allConversions,proto3" json:"all_conversions,omitempty"`
	// The value of all conversions divided by the total cost of ad interactions
	// (such as clicks for text ads or views for video ads).
	AllConversionsValuePerCost *wrappers.DoubleValue `protobuf:"bytes,62,opt,name=all_conversions_value_per_cost,json=allConversionsValuePerCost,proto3" json:"all_conversions_value_per_cost,omitempty"`
	// The value of all conversions from interactions divided by the total number
	// of interactions.
	AllConversionsFromInteractionsValuePerInteraction *wrappers.DoubleValue `protobuf:"bytes,67,opt,name=all_conversions_from_interactions_value_per_interaction,json=allConversionsFromInteractionsValuePerInteraction,proto3" json:"all_conversions_from_interactions_value_per_interaction,omitempty"`
	// The average amount you pay per interaction. This amount is the total cost
	// of your ads divided by the total number of interactions.
	AverageCost *wrappers.DoubleValue `protobuf:"bytes,8,opt,name=average_cost,json=averageCost,proto3" json:"average_cost,omitempty"`
	// The total cost of all clicks divided by the total number of clicks
	// received.
	AverageCpc *wrappers.DoubleValue `protobuf:"bytes,9,opt,name=average_cpc,json=averageCpc,proto3" json:"average_cpc,omitempty"`
	// Average cost-per-thousand impressions (CPM).
	AverageCpm *wrappers.DoubleValue `protobuf:"bytes,10,opt,name=average_cpm,json=averageCpm,proto3" json:"average_cpm,omitempty"`
	// The average amount you pay each time someone views your ad.
	// The average CPV is defined by the total cost of all ad views divided by
	// the number of views.
	AverageCpv *wrappers.DoubleValue `protobuf:"bytes,11,opt,name=average_cpv,json=averageCpv,proto3" json:"average_cpv,omitempty"`
	// Your ad's position relative to those of other advertisers.
	AveragePosition *wrappers.DoubleValue `protobuf:"bytes,13,opt,name=average_position,json=averagePosition,proto3" json:"average_position,omitempty"`
	// An indication on how other advertisers' Shopping ads for similar products
	// are performing based on how often people who see their ad click on it.
	BenchmarkCtr *wrappers.DoubleValue `protobuf:"bytes,77,opt,name=benchmark_ctr,json=benchmarkCtr,proto3" json:"benchmark_ctr,omitempty"`
	// Percentage of clicks where the user only visited a single page on your
	// site. Imported from Google Analytics.
	BounceRate *wrappers.DoubleValue `protobuf:"bytes,15,opt,name=bounce_rate,json=bounceRate,proto3" json:"bounce_rate,omitempty"`
	// The number of clicks.
	Clicks *wrappers.Int64Value `protobuf:"bytes,19,opt,name=clicks,proto3" json:"clicks,omitempty"`
	// The estimated percent of times that your ad was eligible to show
	// on the Display Network but didn't because your budget was too low.
	// Note: Content budget lost impression share is reported in the range of 0
	// to 0.9. Any value above 0.9 is reported as 0.9001.
	ContentBudgetLostImpressionShare *wrappers.DoubleValue `protobuf:"bytes,20,opt,name=content_budget_lost_impression_share,json=contentBudgetLostImpressionShare,proto3" json:"content_budget_lost_impression_share,omitempty"`
	// The impressions you've received on the Display Network divided
	// by the estimated number of impressions you were eligible to receive.
	// Note: Content impression share is reported in the range of 0.1 to 1. Any
	// value below 0.1 is reported as 0.0999.
	ContentImpressionShare *wrappers.DoubleValue `protobuf:"bytes,21,opt,name=content_impression_share,json=contentImpressionShare,proto3" json:"content_impression_share,omitempty"`
	// The last date/time a conversion tag for this conversion action successfully
	// fired and was seen by Google Ads. This firing event may not have been the
	// result of an attributable conversion (e.g. because the tag was fired from a
	// browser that did not previously click an ad from an appropriate
	// advertiser). The date/time is in the customer's time zone.
	ConversionLastReceivedRequestDateTime *wrappers.StringValue `protobuf:"bytes,73,opt,name=conversion_last_received_request_date_time,json=conversionLastReceivedRequestDateTime,proto3" json:"conversion_last_received_request_date_time,omitempty"`
	// The date of the most recent conversion for this conversion action. The date
	// is in the customer's time zone.
	ConversionLastConversionDate *wrappers.StringValue `protobuf:"bytes,74,opt,name=conversion_last_conversion_date,json=conversionLastConversionDate,proto3" json:"conversion_last_conversion_date,omitempty"`
	// The estimated percentage of impressions on the Display Network
	// that your ads didn't receive due to poor Ad Rank.
	// Note: Content rank lost impression share is reported in the range of 0
	// to 0.9. Any value above 0.9 is reported as 0.9001.
	ContentRankLostImpressionShare *wrappers.DoubleValue `protobuf:"bytes,22,opt,name=content_rank_lost_impression_share,json=contentRankLostImpressionShare,proto3" json:"content_rank_lost_impression_share,omitempty"`
	// Conversions from interactions divided by the number of ad interactions
	// (such as clicks for text ads or views for video ads).
	ConversionsFromInteractionsRate *wrappers.DoubleValue `protobuf:"bytes,69,opt,name=conversions_from_interactions_rate,json=conversionsFromInteractionsRate,proto3" json:"conversions_from_interactions_rate,omitempty"`
	// The total value of conversions.
	ConversionsValue *wrappers.DoubleValue `protobuf:"bytes,70,opt,name=conversions_value,json=conversionsValue,proto3" json:"conversions_value,omitempty"`
	// The value of conversions divided by the cost of ad interactions.
	ConversionsValuePerCost *wrappers.DoubleValue `protobuf:"bytes,71,opt,name=conversions_value_per_cost,json=conversionsValuePerCost,proto3" json:"conversions_value_per_cost,omitempty"`
	// The value of conversions from interactions divided by the number of ad
	// interactions.
	ConversionsFromInteractionsValuePerInteraction *wrappers.DoubleValue `protobuf:"bytes,72,opt,name=conversions_from_interactions_value_per_interaction,json=conversionsFromInteractionsValuePerInteraction,proto3" json:"conversions_from_interactions_value_per_interaction,omitempty"`
	// The number of conversions. This only includes conversion actions which have
	// "Include in Conversions" checked.
	Conversions *wrappers.DoubleValue `protobuf:"bytes,25,opt,name=conversions,proto3" json:"conversions,omitempty"`
	// The sum of your cost-per-click (CPC) and cost-per-thousand impressions
	// (CPM) costs during this period.
	CostMicros *wrappers.Int64Value `protobuf:"bytes,26,opt,name=cost_micros,json=costMicros,proto3" json:"cost_micros,omitempty"`
	// The cost of ad interactions divided by all conversions.
	CostPerAllConversions *wrappers.DoubleValue `protobuf:"bytes,68,opt,name=cost_per_all_conversions,json=costPerAllConversions,proto3" json:"cost_per_all_conversions,omitempty"`
	// The cost of ad interactions divided by conversions.
	CostPerConversion *wrappers.DoubleValue `protobuf:"bytes,28,opt,name=cost_per_conversion,json=costPerConversion,proto3" json:"cost_per_conversion,omitempty"`
	// Conversions from when a customer clicks on a Google Ads ad on one device,
	// then converts on a different device or browser.
	// Cross-device conversions are already included in all_conversions.
	CrossDeviceConversions *wrappers.DoubleValue `protobuf:"bytes,29,opt,name=cross_device_conversions,json=crossDeviceConversions,proto3" json:"cross_device_conversions,omitempty"`
	// The number of clicks your ad receives (Clicks) divided by the number
	// of times your ad is shown (Impressions).
	Ctr *wrappers.DoubleValue `protobuf:"bytes,30,opt,name=ctr,proto3" json:"ctr,omitempty"`
	// How often people engage with your ad after it's shown to them. This is the
	// number of ad expansions divided by the number of times your ad is shown.
	EngagementRate *wrappers.DoubleValue `protobuf:"bytes,31,opt,name=engagement_rate,json=engagementRate,proto3" json:"engagement_rate,omitempty"`
	// The number of engagements.
	// An engagement occurs when a viewer expands your Lightbox ad. Also, in the
	// future, other ad types may support engagement metrics.
	Engagements *wrappers.Int64Value `protobuf:"bytes,32,opt,name=engagements,proto3" json:"engagements,omitempty"`
	// Average lead value of hotel.
	HotelAverageLeadValueMicros *wrappers.DoubleValue `protobuf:"bytes,75,opt,name=hotel_average_lead_value_micros,json=hotelAverageLeadValueMicros,proto3" json:"hotel_average_lead_value_micros,omitempty"`
	// Count of how often your ad has appeared on a search results page or
	// website on the Google Network.
	Impressions *wrappers.Int64Value `protobuf:"bytes,37,opt,name=impressions,proto3" json:"impressions,omitempty"`
	// How often people interact with your ad after it is shown to them.
	// This is the number of interactions divided by the number of times your ad
	// is shown.
	InteractionRate *wrappers.DoubleValue `protobuf:"bytes,38,opt,name=interaction_rate,json=interactionRate,proto3" json:"interaction_rate,omitempty"`
	// The number of interactions.
	// An interaction is the main user action associated with an ad format-clicks
	// for text and shopping ads, views for video ads, and so on.
	Interactions *wrappers.Int64Value `protobuf:"bytes,39,opt,name=interactions,proto3" json:"interactions,omitempty"`
	// The percentage of clicks filtered out of your total number of clicks
	// (filtered + non-filtered clicks) during the reporting period.
	InvalidClickRate *wrappers.DoubleValue `protobuf:"bytes,40,opt,name=invalid_click_rate,json=invalidClickRate,proto3" json:"invalid_click_rate,omitempty"`
	// Number of clicks Google considers illegitimate and doesn't charge you for.
	InvalidClicks *wrappers.Int64Value `protobuf:"bytes,41,opt,name=invalid_clicks,json=invalidClicks,proto3" json:"invalid_clicks,omitempty"`
	// Percentage of first-time sessions (from people who had never visited your
	// site before). Imported from Google Analytics.
	PercentNewVisitors *wrappers.DoubleValue `protobuf:"bytes,42,opt,name=percent_new_visitors,json=percentNewVisitors,proto3" json:"percent_new_visitors,omitempty"`
	// Number of offline phone calls.
	PhoneCalls *wrappers.Int64Value `protobuf:"bytes,43,opt,name=phone_calls,json=phoneCalls,proto3" json:"phone_calls,omitempty"`
	// Number of offline phone impressions.
	PhoneImpressions *wrappers.Int64Value `protobuf:"bytes,44,opt,name=phone_impressions,json=phoneImpressions,proto3" json:"phone_impressions,omitempty"`
	// Number of phone calls received (phone_calls) divided by the number of
	// times your phone number is shown (phone_impressions).
	PhoneThroughRate *wrappers.DoubleValue `protobuf:"bytes,45,opt,name=phone_through_rate,json=phoneThroughRate,proto3" json:"phone_through_rate,omitempty"`
	// Your clickthrough rate (Ctr) divided by the average clickthrough rate of
	// all advertisers on the websites that show your ads. Measures how your ads
	// perform on Display Network sites compared to other ads on the same sites.
	RelativeCtr *wrappers.DoubleValue `protobuf:"bytes,46,opt,name=relative_ctr,json=relativeCtr,proto3" json:"relative_ctr,omitempty"`
	// The percentage of the customer's Shopping ad impressions that are shown in
	// the most prominent Shopping position. See
	// <a href="https://support.google.com/adwords/answer/7501826">this Merchant
	// Center article</a> for details. Any value below 0.1 is reported as 0.0999.
	SearchAbsoluteTopImpressionShare *wrappers.DoubleValue `protobuf:"bytes,78,opt,name=search_absolute_top_impression_share,json=searchAbsoluteTopImpressionShare,proto3" json:"search_absolute_top_impression_share,omitempty"`
	// The estimated percent of times that your ad was eligible to show on the
	// Search Network but didn't because your budget was too low. Note: Search
	// budget lost impression share is reported in the range of 0 to 0.9. Any
	// value above 0.9 is reported as 0.9001.
	SearchBudgetLostImpressionShare *wrappers.DoubleValue `protobuf:"bytes,47,opt,name=search_budget_lost_impression_share,json=searchBudgetLostImpressionShare,proto3" json:"search_budget_lost_impression_share,omitempty"`
	// The impressions you've received divided by the estimated number of
	// impressions you were eligible to receive on the Search Network for search
	// terms that matched your keywords exactly (or were close variants of your
	// keyword), regardless of your keyword match types. Note: Search exact match
	// impression share is reported in the range of 0.1 to 1. Any value below 0.1
	// is reported as 0.0999.
	SearchExactMatchImpressionShare *wrappers.DoubleValue `protobuf:"bytes,49,opt,name=search_exact_match_impression_share,json=searchExactMatchImpressionShare,proto3" json:"search_exact_match_impression_share,omitempty"`
	// The impressions you've received on the Search Network divided
	// by the estimated number of impressions you were eligible to receive.
	// Note: Search impression share is reported in the range of 0.1 to 1. Any
	// value below 0.1 is reported as 0.0999.
	SearchImpressionShare *wrappers.DoubleValue `protobuf:"bytes,50,opt,name=search_impression_share,json=searchImpressionShare,proto3" json:"search_impression_share,omitempty"`
	// The estimated percentage of impressions on the Search Network
	// that your ads didn't receive due to poor Ad Rank.
	// Note: Search rank lost impression share is reported in the range of 0 to
	// 0.9. Any value above 0.9 is reported as 0.9001.
	SearchRankLostImpressionShare *wrappers.DoubleValue `protobuf:"bytes,51,opt,name=search_rank_lost_impression_share,json=searchRankLostImpressionShare,proto3" json:"search_rank_lost_impression_share,omitempty"`
	// The value of all conversions divided by the number of all conversions.
	ValuePerAllConversions *wrappers.DoubleValue `protobuf:"bytes,52,opt,name=value_per_all_conversions,json=valuePerAllConversions,proto3" json:"value_per_all_conversions,omitempty"`
	// The value of conversions divided by the number of conversions.
	ValuePerConversion *wrappers.DoubleValue `protobuf:"bytes,53,opt,name=value_per_conversion,json=valuePerConversion,proto3" json:"value_per_conversion,omitempty"`
	// Percentage of impressions where the viewer watched all of your video.
	VideoQuartile_100Rate *wrappers.DoubleValue `protobuf:"bytes,54,opt,name=video_quartile_100_rate,json=videoQuartile100Rate,proto3" json:"video_quartile_100_rate,omitempty"`
	// Percentage of impressions where the viewer watched 25% of your video.
	VideoQuartile_25Rate *wrappers.DoubleValue `protobuf:"bytes,55,opt,name=video_quartile_25_rate,json=videoQuartile25Rate,proto3" json:"video_quartile_25_rate,omitempty"`
	// Percentage of impressions where the viewer watched 50% of your video.
	VideoQuartile_50Rate *wrappers.DoubleValue `protobuf:"bytes,56,opt,name=video_quartile_50_rate,json=videoQuartile50Rate,proto3" json:"video_quartile_50_rate,omitempty"`
	// Percentage of impressions where the viewer watched 75% of your video.
	VideoQuartile_75Rate *wrappers.DoubleValue `protobuf:"bytes,57,opt,name=video_quartile_75_rate,json=videoQuartile75Rate,proto3" json:"video_quartile_75_rate,omitempty"`
	// The number of views your TrueView video ad receives divided by its number
	// of impressions, including thumbnail impressions for TrueView in-display
	// ads.
	VideoViewRate *wrappers.DoubleValue `protobuf:"bytes,58,opt,name=video_view_rate,json=videoViewRate,proto3" json:"video_view_rate,omitempty"`
	// The number of times your video ads were viewed.
	VideoViews *wrappers.Int64Value `protobuf:"bytes,59,opt,name=video_views,json=videoViews,proto3" json:"video_views,omitempty"`
	// The total number of view-through conversions.
	// These happen when a customer sees an image or rich media ad, then later
	// completes a conversion on your site without interacting with (e.g.,
	// clicking on) another ad.
	ViewThroughConversions *wrappers.Int64Value `protobuf:"bytes,60,opt,name=view_through_conversions,json=viewThroughConversions,proto3" json:"view_through_conversions,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}             `json:"-"`
	XXX_unrecognized       []byte               `json:"-"`
	XXX_sizecache          int32                `json:"-"`
}

func (m *Metrics) Reset()         { *m = Metrics{} }
func (m *Metrics) String() string { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()    {}
func (*Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_7c5dfe462d366304, []int{0}
}
func (m *Metrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics.Unmarshal(m, b)
}
func (m *Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics.Marshal(b, m, deterministic)
}
func (dst *Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics.Merge(dst, src)
}
func (m *Metrics) XXX_Size() int {
	return xxx_messageInfo_Metrics.Size(m)
}
func (m *Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics proto.InternalMessageInfo

func (m *Metrics) GetAllConversionsFromInteractionsRate() *wrappers.DoubleValue {
	if m != nil {
		return m.AllConversionsFromInteractionsRate
	}
	return nil
}

func (m *Metrics) GetAllConversionsValue() *wrappers.DoubleValue {
	if m != nil {
		return m.AllConversionsValue
	}
	return nil
}

func (m *Metrics) GetAllConversions() *wrappers.DoubleValue {
	if m != nil {
		return m.AllConversions
	}
	return nil
}

func (m *Metrics) GetAllConversionsValuePerCost() *wrappers.DoubleValue {
	if m != nil {
		return m.AllConversionsValuePerCost
	}
	return nil
}

func (m *Metrics) GetAllConversionsFromInteractionsValuePerInteraction() *wrappers.DoubleValue {
	if m != nil {
		return m.AllConversionsFromInteractionsValuePerInteraction
	}
	return nil
}

func (m *Metrics) GetAverageCost() *wrappers.DoubleValue {
	if m != nil {
		return m.AverageCost
	}
	return nil
}

func (m *Metrics) GetAverageCpc() *wrappers.DoubleValue {
	if m != nil {
		return m.AverageCpc
	}
	return nil
}

func (m *Metrics) GetAverageCpm() *wrappers.DoubleValue {
	if m != nil {
		return m.AverageCpm
	}
	return nil
}

func (m *Metrics) GetAverageCpv() *wrappers.DoubleValue {
	if m != nil {
		return m.AverageCpv
	}
	return nil
}

func (m *Metrics) GetAveragePosition() *wrappers.DoubleValue {
	if m != nil {
		return m.AveragePosition
	}
	return nil
}

func (m *Metrics) GetBenchmarkCtr() *wrappers.DoubleValue {
	if m != nil {
		return m.BenchmarkCtr
	}
	return nil
}

func (m *Metrics) GetBounceRate() *wrappers.DoubleValue {
	if m != nil {
		return m.BounceRate
	}
	return nil
}

func (m *Metrics) GetClicks() *wrappers.Int64Value {
	if m != nil {
		return m.Clicks
	}
	return nil
}

func (m *Metrics) GetContentBudgetLostImpressionShare() *wrappers.DoubleValue {
	if m != nil {
		return m.ContentBudgetLostImpressionShare
	}
	return nil
}

func (m *Metrics) GetContentImpressionShare() *wrappers.DoubleValue {
	if m != nil {
		return m.ContentImpressionShare
	}
	return nil
}

func (m *Metrics) GetConversionLastReceivedRequestDateTime() *wrappers.StringValue {
	if m != nil {
		return m.ConversionLastReceivedRequestDateTime
	}
	return nil
}

func (m *Metrics) GetConversionLastConversionDate() *wrappers.StringValue {
	if m != nil {
		return m.ConversionLastConversionDate
	}
	return nil
}

func (m *Metrics) GetContentRankLostImpressionShare() *wrappers.DoubleValue {
	if m != nil {
		return m.ContentRankLostImpressionShare
	}
	return nil
}

func (m *Metrics) GetConversionsFromInteractionsRate() *wrappers.DoubleValue {
	if m != nil {
		return m.ConversionsFromInteractionsRate
	}
	return nil
}

func (m *Metrics) GetConversionsValue() *wrappers.DoubleValue {
	if m != nil {
		return m.ConversionsValue
	}
	return nil
}

func (m *Metrics) GetConversionsValuePerCost() *wrappers.DoubleValue {
	if m != nil {
		return m.ConversionsValuePerCost
	}
	return nil
}

func (m *Metrics) GetConversionsFromInteractionsValuePerInteraction() *wrappers.DoubleValue {
	if m != nil {
		return m.ConversionsFromInteractionsValuePerInteraction
	}
	return nil
}

func (m *Metrics) GetConversions() *wrappers.DoubleValue {
	if m != nil {
		return m.Conversions
	}
	return nil
}

func (m *Metrics) GetCostMicros() *wrappers.Int64Value {
	if m != nil {
		return m.CostMicros
	}
	return nil
}

func (m *Metrics) GetCostPerAllConversions() *wrappers.DoubleValue {
	if m != nil {
		return m.CostPerAllConversions
	}
	return nil
}

func (m *Metrics) GetCostPerConversion() *wrappers.DoubleValue {
	if m != nil {
		return m.CostPerConversion
	}
	return nil
}

func (m *Metrics) GetCrossDeviceConversions() *wrappers.DoubleValue {
	if m != nil {
		return m.CrossDeviceConversions
	}
	return nil
}

func (m *Metrics) GetCtr() *wrappers.DoubleValue {
	if m != nil {
		return m.Ctr
	}
	return nil
}

func (m *Metrics) GetEngagementRate() *wrappers.DoubleValue {
	if m != nil {
		return m.EngagementRate
	}
	return nil
}

func (m *Metrics) GetEngagements() *wrappers.Int64Value {
	if m != nil {
		return m.Engagements
	}
	return nil
}

func (m *Metrics) GetHotelAverageLeadValueMicros() *wrappers.DoubleValue {
	if m != nil {
		return m.HotelAverageLeadValueMicros
	}
	return nil
}

func (m *Metrics) GetImpressions() *wrappers.Int64Value {
	if m != nil {
		return m.Impressions
	}
	return nil
}

func (m *Metrics) GetInteractionRate() *wrappers.DoubleValue {
	if m != nil {
		return m.InteractionRate
	}
	return nil
}

func (m *Metrics) GetInteractions() *wrappers.Int64Value {
	if m != nil {
		return m.Interactions
	}
	return nil
}

func (m *Metrics) GetInvalidClickRate() *wrappers.DoubleValue {
	if m != nil {
		return m.InvalidClickRate
	}
	return nil
}

func (m *Metrics) GetInvalidClicks() *wrappers.Int64Value {
	if m != nil {
		return m.InvalidClicks
	}
	return nil
}

func (m *Metrics) GetPercentNewVisitors() *wrappers.DoubleValue {
	if m != nil {
		return m.PercentNewVisitors
	}
	return nil
}

func (m *Metrics) GetPhoneCalls() *wrappers.Int64Value {
	if m != nil {
		return m.PhoneCalls
	}
	return nil
}

func (m *Metrics) GetPhoneImpressions() *wrappers.Int64Value {
	if m != nil {
		return m.PhoneImpressions
	}
	return nil
}

func (m *Metrics) GetPhoneThroughRate() *wrappers.DoubleValue {
	if m != nil {
		return m.PhoneThroughRate
	}
	return nil
}

func (m *Metrics) GetRelativeCtr() *wrappers.DoubleValue {
	if m != nil {
		return m.RelativeCtr
	}
	return nil
}

func (m *Metrics) GetSearchAbsoluteTopImpressionShare() *wrappers.DoubleValue {
	if m != nil {
		return m.SearchAbsoluteTopImpressionShare
	}
	return nil
}

func (m *Metrics) GetSearchBudgetLostImpressionShare() *wrappers.DoubleValue {
	if m != nil {
		return m.SearchBudgetLostImpressionShare
	}
	return nil
}

func (m *Metrics) GetSearchExactMatchImpressionShare() *wrappers.DoubleValue {
	if m != nil {
		return m.SearchExactMatchImpressionShare
	}
	return nil
}

func (m *Metrics) GetSearchImpressionShare() *wrappers.DoubleValue {
	if m != nil {
		return m.SearchImpressionShare
	}
	return nil
}

func (m *Metrics) GetSearchRankLostImpressionShare() *wrappers.DoubleValue {
	if m != nil {
		return m.SearchRankLostImpressionShare
	}
	return nil
}

func (m *Metrics) GetValuePerAllConversions() *wrappers.DoubleValue {
	if m != nil {
		return m.ValuePerAllConversions
	}
	return nil
}

func (m *Metrics) GetValuePerConversion() *wrappers.DoubleValue {
	if m != nil {
		return m.ValuePerConversion
	}
	return nil
}

func (m *Metrics) GetVideoQuartile_100Rate() *wrappers.DoubleValue {
	if m != nil {
		return m.VideoQuartile_100Rate
	}
	return nil
}

func (m *Metrics) GetVideoQuartile_25Rate() *wrappers.DoubleValue {
	if m != nil {
		return m.VideoQuartile_25Rate
	}
	return nil
}

func (m *Metrics) GetVideoQuartile_50Rate() *wrappers.DoubleValue {
	if m != nil {
		return m.VideoQuartile_50Rate
	}
	return nil
}

func (m *Metrics) GetVideoQuartile_75Rate() *wrappers.DoubleValue {
	if m != nil {
		return m.VideoQuartile_75Rate
	}
	return nil
}

func (m *Metrics) GetVideoViewRate() *wrappers.DoubleValue {
	if m != nil {
		return m.VideoViewRate
	}
	return nil
}

func (m *Metrics) GetVideoViews() *wrappers.Int64Value {
	if m != nil {
		return m.VideoViews
	}
	return nil
}

func (m *Metrics) GetViewThroughConversions() *wrappers.Int64Value {
	if m != nil {
		return m.ViewThroughConversions
	}
	return nil
}

func init() {
	proto.RegisterType((*Metrics)(nil), "google.ads.googleads.v0.common.Metrics")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v0/common/metrics.proto", fileDescriptor_metrics_7c5dfe462d366304)
}

var fileDescriptor_metrics_7c5dfe462d366304 = []byte{
	// 1314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x98, 0xed, 0x52, 0xdb, 0x46,
	0x17, 0xc7, 0x87, 0x64, 0x26, 0x79, 0x9e, 0x35, 0x84, 0x44, 0x21, 0x44, 0x21, 0x09, 0x49, 0xf3,
	0xd6, 0x34, 0x4d, 0x65, 0x03, 0x21, 0xb4, 0xcd, 0xdb, 0x18, 0x93, 0x10, 0x52, 0x60, 0x08, 0xa1,
	0x74, 0xda, 0x61, 0x66, 0xbb, 0x5e, 0x9f, 0xd8, 0x2a, 0x92, 0x56, 0xd9, 0x5d, 0x8b, 0xde, 0x42,
	0xbf, 0xf5, 0x1a, 0xfa, 0xb1, 0x97, 0xd1, 0x8f, 0xbd, 0x85, 0xde, 0x4c, 0x67, 0x5f, 0x6c, 0xc9,
	0x32, 0xc6, 0x4b, 0x3f, 0x21, 0xc4, 0xf9, 0xff, 0xfe, 0x47, 0xab, 0xdd, 0x73, 0x0e, 0x42, 0x8f,
	0xdb, 0x8c, 0xb5, 0x23, 0xa8, 0x92, 0x96, 0xa8, 0x9a, 0x4b, 0x75, 0x95, 0xd5, 0xaa, 0x94, 0xc5,
	0x31, 0x4b, 0xaa, 0x31, 0x48, 0x1e, 0x52, 0x11, 0xa4, 0x9c, 0x49, 0xe6, 0xcd, 0x9b, 0x90, 0x80,
	0xb4, 0x44, 0xd0, 0x8f, 0x0e, 0xb2, 0x5a, 0x60, 0xa2, 0xe7, 0xec, 0xdf, 0xab, 0x3a, 0xba, 0xd9,
	0xfd, 0x58, 0x3d, 0xe2, 0x24, 0x4d, 0x81, 0x5b, 0xfd, 0x9d, 0x7f, 0xee, 0xa2, 0xf3, 0x5b, 0x86,
	0xe8, 0xa5, 0xe8, 0x01, 0x89, 0x22, 0x4c, 0x59, 0x92, 0x01, 0x17, 0x21, 0x4b, 0x04, 0xfe, 0xc8,
	0x59, 0x8c, 0xc3, 0x44, 0x02, 0x27, 0x54, 0xea, 0x3b, 0x9c, 0x48, 0xf0, 0xeb, 0xb7, 0x27, 0x1e,
	0x56, 0x16, 0x6f, 0x58, 0xc7, 0xa0, 0x07, 0x0f, 0xd6, 0x58, 0xb7, 0x19, 0xc1, 0x3e, 0x89, 0xba,
	0xb0, 0x7b, 0x87, 0x44, 0x51, 0x23, 0x47, 0xbd, 0xe1, 0x2c, 0xde, 0x28, 0x80, 0x76, 0x89, 0x04,
	0x6f, 0x07, 0x5d, 0x29, 0x3b, 0x66, 0x4a, 0xec, 0xaf, 0x3a, 0x18, 0x5c, 0x1e, 0x34, 0xd0, 0x37,
	0xbd, 0xd7, 0x68, 0xba, 0x44, 0xf4, 0xcf, 0x3b, 0xb0, 0x2e, 0x0c, 0xb2, 0xbc, 0x9f, 0xd1, 0xfc,
	0xb1, 0x89, 0xe1, 0x14, 0x38, 0xa6, 0x4c, 0x48, 0xff, 0xa5, 0x03, 0x75, 0xee, 0x98, 0x0c, 0x77,
	0x80, 0x37, 0x98, 0x90, 0xde, 0xef, 0x13, 0x68, 0x65, 0xfc, 0x6a, 0xe7, 0xa6, 0x85, 0xdb, 0x7e,
	0xc3, 0xc1, 0x7b, 0xe1, 0xe4, 0xe5, 0xef, 0xe5, 0x52, 0xb8, 0xe7, 0xbd, 0x42, 0x93, 0x24, 0x03,
	0x4e, 0xda, 0x60, 0x1e, 0xf1, 0x7f, 0x0e, 0x36, 0x15, 0xab, 0xd0, 0xcf, 0xf4, 0x02, 0x55, 0xfa,
	0x80, 0x94, 0xfa, 0xff, 0x77, 0xd0, 0xa3, 0x9e, 0x3e, 0xa5, 0x83, 0xf2, 0xd8, 0x47, 0xa7, 0x92,
	0xc7, 0x83, 0xf2, 0xcc, 0xaf, 0x9c, 0x4a, 0x9e, 0x79, 0xeb, 0xe8, 0x62, 0x4f, 0x9e, 0x32, 0x11,
	0xea, 0x85, 0x9e, 0x72, 0x60, 0x4c, 0x5b, 0xd5, 0x8e, 0x15, 0x79, 0x75, 0x34, 0xd5, 0x84, 0x84,
	0x76, 0x62, 0xc2, 0x0f, 0x31, 0x95, 0xdc, 0xdf, 0x72, 0xa0, 0x4c, 0xf6, 0x25, 0x0d, 0xc9, 0xd5,
	0xa3, 0x34, 0x59, 0x37, 0xa1, 0x60, 0x8e, 0xdb, 0xb4, 0xcb, 0xa3, 0x18, 0x81, 0x3e, 0x56, 0x4b,
	0xe8, 0x1c, 0x8d, 0x42, 0x7a, 0x28, 0xfc, 0xcb, 0x5a, 0x79, 0x7d, 0x48, 0xb9, 0x91, 0xc8, 0xa7,
	0x4f, 0x8c, 0xd0, 0x86, 0x7a, 0x11, 0xba, 0x47, 0x59, 0x22, 0x21, 0x91, 0xb8, 0xd9, 0x6d, 0xb5,
	0x41, 0xe2, 0x88, 0x09, 0x89, 0xc3, 0x38, 0xe5, 0x20, 0xd4, 0x1e, 0xc2, 0xa2, 0x43, 0x38, 0xf8,
	0x33, 0x0e, 0xc9, 0xdc, 0xb6, 0xa4, 0x55, 0x0d, 0xda, 0x64, 0x42, 0x6e, 0xf4, 0x31, 0x1f, 0x14,
	0xc5, 0xdb, 0x47, 0x7e, 0xcf, 0x6d, 0xc8, 0xe1, 0x8a, 0x83, 0xc3, 0xac, 0x55, 0x97, 0xb9, 0x47,
	0xe8, 0x51, 0x7e, 0xa2, 0x70, 0x44, 0x84, 0xc4, 0x1c, 0x28, 0x84, 0x19, 0xb4, 0x30, 0x87, 0x4f,
	0x5d, 0x10, 0x12, 0xb7, 0x88, 0x04, 0x2c, 0xc3, 0x18, 0xfc, 0x8d, 0x11, 0x4e, 0x1f, 0x24, 0x0f,
	0x93, 0xb6, 0x71, 0xba, 0x9f, 0xf3, 0x36, 0x89, 0x90, 0xbb, 0x96, 0xb6, 0x6b, 0x60, 0x6b, 0x44,
	0xc2, 0x5e, 0x18, 0x83, 0x47, 0xd1, 0xad, 0xb2, 0x71, 0xe1, 0x77, 0x65, 0xe9, 0xbf, 0x73, 0x70,
	0xbb, 0x31, 0xe8, 0x96, 0x9f, 0x60, 0x65, 0xe4, 0x75, 0xd0, 0x9d, 0xde, 0xaa, 0x71, 0x92, 0x1c,
	0x8e, 0x78, 0x43, 0xb3, 0x0e, 0xeb, 0x37, 0x6f, 0x39, 0xbb, 0x24, 0x39, 0x3c, 0xee, 0xfd, 0x84,
	0xda, 0x69, 0x5c, 0x1f, 0x78, 0xed, 0xe0, 0x54, 0x58, 0x96, 0xe3, 0x9b, 0xc0, 0x06, 0xba, 0x34,
	0xdc, 0x00, 0xde, 0x38, 0x90, 0x2f, 0xd2, 0x72, 0xf5, 0xff, 0x11, 0xcd, 0x9d, 0x50, 0xb2, 0xd7,
	0x1d, 0x98, 0x57, 0xe9, 0x88, 0x7a, 0xfd, 0xdb, 0x04, 0x5a, 0xfa, 0x2f, 0xb5, 0xfa, 0xad, 0x83,
	0x69, 0x40, 0x4f, 0x57, 0xa8, 0x5f, 0xa2, 0x4a, 0xb1, 0xc1, 0x5d, 0x73, 0xa9, 0xd3, 0x05, 0x81,
	0xf7, 0x5c, 0xe9, 0x85, 0xc4, 0x71, 0x48, 0x39, 0x13, 0xfe, 0xdc, 0xf8, 0x22, 0x81, 0x54, 0xfc,
	0x96, 0x0e, 0xf7, 0xbe, 0x57, 0x47, 0x57, 0x48, 0xfd, 0xa4, 0xe5, 0x5e, 0xbb, 0xe6, 0x90, 0xca,
	0x15, 0xa5, 0xde, 0x01, 0x5e, 0x1f, 0x6c, 0xb9, 0x9b, 0xe8, 0x72, 0x1f, 0x9b, 0x23, 0xfd, 0x1b,
	0x0e, 0xc4, 0x4b, 0x96, 0x98, 0xe3, 0x74, 0x7d, 0xe1, 0x4c, 0x08, 0xdc, 0x82, 0x2c, 0xa4, 0x30,
	0x90, 0xe4, 0x4d, 0xa7, 0xfa, 0xa2, 0xd4, 0x6b, 0x5a, 0x5c, 0xcc, 0x32, 0x40, 0x67, 0x55, 0x49,
	0x9f, 0x77, 0x40, 0xa8, 0x40, 0x35, 0x8f, 0x40, 0xd2, 0x26, 0x6d, 0x88, 0xcd, 0xa1, 0x95, 0xe0,
	0xdf, 0x72, 0x99, 0x47, 0x72, 0x91, 0x3e, 0x23, 0x2f, 0x50, 0x25, 0xbf, 0x23, 0xfc, 0xdb, 0xe3,
	0xdf, 0x58, 0x31, 0xde, 0x6b, 0xa2, 0x5b, 0x1d, 0x26, 0x21, 0xc2, 0xbd, 0x0e, 0xa7, 0xc6, 0x44,
	0xbb, 0x61, 0xed, 0x26, 0xf8, 0xce, 0x21, 0xab, 0xeb, 0x1a, 0x52, 0x37, 0x8c, 0x4d, 0x20, 0x2d,
	0x7d, 0xdb, 0x6e, 0x8b, 0x17, 0xa8, 0x92, 0x57, 0x22, 0xe1, 0xdf, 0x77, 0x48, 0xb1, 0x10, 0xaf,
	0xda, 0x6f, 0xe1, 0xd8, 0x98, 0x95, 0x7a, 0xe0, 0xd2, 0x7e, 0x0b, 0x2a, 0xbd, 0x54, 0xaf, 0xd0,
	0x64, 0xf1, 0x58, 0xfa, 0x9f, 0x8f, 0x4f, 0x64, 0x40, 0xe0, 0xbd, 0x43, 0x5e, 0x98, 0x64, 0x24,
	0x0a, 0x5b, 0x58, 0xb7, 0x46, 0x93, 0xcb, 0x43, 0x97, 0x82, 0x64, 0x75, 0x0d, 0x25, 0xd3, 0xc9,
	0xac, 0xa2, 0x0b, 0x03, 0x2c, 0xe1, 0x7f, 0x31, 0x3e, 0x9d, 0xa9, 0x22, 0x46, 0x78, 0xdb, 0x68,
	0x26, 0x05, 0x4e, 0xd5, 0xfe, 0x49, 0xe0, 0x08, 0x67, 0xa1, 0x08, 0x25, 0xe3, 0xc2, 0x7f, 0xe4,
	0x90, 0x91, 0x67, 0x95, 0xdb, 0x70, 0xb4, 0x6f, 0x75, 0xea, 0xf4, 0xa7, 0x1d, 0x96, 0x00, 0xa6,
	0x24, 0x8a, 0x84, 0xff, 0xa5, 0xc3, 0xe9, 0xd7, 0xf1, 0x0d, 0x15, 0xee, 0xbd, 0x45, 0x97, 0x8c,
	0xba, 0xf8, 0xb2, 0x1f, 0x8f, 0x67, 0x5c, 0xd4, 0xaa, 0x8d, 0xc2, 0x1b, 0x7f, 0x87, 0x3c, 0x43,
	0x92, 0x1d, 0xce, 0xba, 0xed, 0x8e, 0x59, 0xe7, 0xaf, 0x5c, 0xd6, 0x59, 0xeb, 0xf6, 0x8c, 0xac,
	0xf7, 0xd2, 0x39, 0x44, 0x44, 0x86, 0x19, 0xe8, 0x91, 0x2b, 0x70, 0x29, 0x89, 0x3d, 0x85, 0x9a,
	0xb8, 0x22, 0x74, 0x4f, 0x00, 0xe1, 0xb4, 0x83, 0x49, 0x53, 0xb0, 0xa8, 0xab, 0x26, 0x04, 0x96,
	0x0e, 0xf7, 0xd6, 0x6d, 0x97, 0xe9, 0xc7, 0x90, 0xea, 0x16, 0xb4, 0xc7, 0xd2, 0x72, 0x77, 0xfd,
	0x05, 0xdd, 0xb5, 0x6e, 0x27, 0x8e, 0x5a, 0x55, 0x97, 0xf6, 0x6a, 0x40, 0xa3, 0x27, 0xad, 0xdc,
	0x0b, 0x7e, 0x25, 0x54, 0xe2, 0x98, 0x48, 0xda, 0x19, 0xf6, 0x5a, 0x70, 0xf7, 0x7a, 0xad, 0x38,
	0x5b, 0x0a, 0x53, 0xf6, 0xda, 0x43, 0x57, 0xad, 0xd7, 0x10, 0x7f, 0xd1, 0xa5, 0x33, 0x18, 0x71,
	0x99, 0xfa, 0x11, 0x7d, 0x66, 0xa9, 0x27, 0x0c, 0x3d, 0x4b, 0x0e, 0xfc, 0x9b, 0x06, 0x33, 0x6a,
	0xe6, 0xf9, 0x01, 0x5d, 0xcb, 0x7b, 0x78, 0xb9, 0xb3, 0x3d, 0x71, 0x69, 0x1a, 0x99, 0x6d, 0xd6,
	0xa5, 0xd6, 0xb6, 0x8d, 0x66, 0x8a, 0xa3, 0x48, 0xbf, 0xb7, 0x2d, 0xbb, 0x9c, 0xe0, 0xac, 0x3f,
	0x85, 0xf4, 0x9b, 0xdb, 0x07, 0x74, 0x35, 0x0b, 0x5b, 0xc0, 0xf0, 0xa7, 0x2e, 0xe1, 0x32, 0x8c,
	0x00, 0x2f, 0xd4, 0x6a, 0xe6, 0xf8, 0x3c, 0x75, 0x40, 0xce, 0x68, 0xf1, 0x7b, 0xab, 0x5d, 0xa8,
	0xd5, 0xf4, 0x11, 0x7a, 0x8f, 0x66, 0x4b, 0xd0, 0xc5, 0x65, 0xc3, 0x5c, 0x71, 0xf9, 0x67, 0x7c,
	0x80, 0xb9, 0xb8, 0x3c, 0x02, 0xb9, 0x6c, 0xd3, 0xfc, 0xfa, 0xd4, 0xc8, 0xe5, 0x51, 0x59, 0xae,
	0xd8, 0x2c, 0xbf, 0x39, 0x35, 0x72, 0xc5, 0x64, 0xb9, 0x86, 0xa6, 0x0d, 0x32, 0x0b, 0xe1, 0xc8,
	0xb0, 0xbe, 0x75, 0x60, 0x4d, 0x69, 0xd1, 0x7e, 0x08, 0x47, 0x9a, 0xf2, 0x1c, 0x55, 0x72, 0x8a,
	0xf0, 0x9f, 0x39, 0x54, 0xd5, 0x3e, 0x40, 0xcf, 0x54, 0xda, 0xbd, 0x57, 0x0a, 0x8b, 0x3b, 0xef,
	0xf9, 0x78, 0xd4, 0xac, 0x12, 0xdb, 0x7a, 0x58, 0xd8, 0x78, 0xab, 0x7f, 0x4d, 0xa8, 0x31, 0x3e,
	0x0e, 0x4e, 0xfe, 0x48, 0xb4, 0x3a, 0x69, 0xbf, 0x00, 0xed, 0x28, 0xf4, 0xce, 0xc4, 0x4f, 0x6b,
	0x36, 0xbe, 0xcd, 0x22, 0x92, 0xb4, 0x03, 0xc6, 0xdb, 0xd5, 0x36, 0x24, 0xda, 0xb8, 0xf7, 0x49,
	0x2a, 0x0d, 0xc5, 0xa8, 0x2f, 0x54, 0xcf, 0xcc, 0x8f, 0x3f, 0xce, 0x9c, 0x5d, 0xaf, 0xd7, 0xff,
	0x3c, 0x33, 0xbf, 0x6e, 0x60, 0xf5, 0x96, 0x08, 0xcc, 0xa5, 0xba, 0xda, 0xaf, 0x05, 0x0d, 0x1d,
	0xf6, 0x77, 0x2f, 0xe0, 0xa0, 0xde, 0x12, 0x07, 0xfd, 0x80, 0x83, 0xfd, 0xda, 0x81, 0x09, 0x68,
	0x9e, 0xd3, 0xc6, 0x4b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x6f, 0x5e, 0x32, 0x19, 0x13,
	0x00, 0x00,
}
