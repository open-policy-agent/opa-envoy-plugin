// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v0/common/matching_function.proto

package common // import "google.golang.org/genproto/googleapis/ads/googleads/v0/common"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Matching function associated with a
// CustomerFeed, CampaignFeed, or AdGroupFeed. The matching function is used
// to filter the set of feed items selected.
type MatchingFunction struct {
	// String representation of the Function.
	//
	// Examples:
	// 1) IDENTITY(true) or IDENTITY(false). All or none feed items serve.
	// 2) EQUALS(CONTEXT.DEVICE,"Mobile")
	// 3) IN(FEED_ITEM_ID,{1000001,1000002,1000003})
	// 4) CONTAINS_ANY(FeedAttribute[12345678,0],{"Mars cruise","Venus cruise"})
	// 5) AND(IN(FEED_ITEM_ID,{10001,10002}),EQUALS(CONTEXT.DEVICE,"Mobile"))
	// See
	// https:
	// //developers.google.com/adwords/api/docs/guides/feed-matching-functions
	//
	// Note that because multiple strings may represent the same underlying
	// function (whitespace and single versus double quotation marks, for
	// example), the value returned may not be identical to the string sent in a
	// mutate request.
	FunctionString       *wrappers.StringValue `protobuf:"bytes,1,opt,name=function_string,json=functionString,proto3" json:"function_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MatchingFunction) Reset()         { *m = MatchingFunction{} }
func (m *MatchingFunction) String() string { return proto.CompactTextString(m) }
func (*MatchingFunction) ProtoMessage()    {}
func (*MatchingFunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_matching_function_ced7df2e67441782, []int{0}
}
func (m *MatchingFunction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchingFunction.Unmarshal(m, b)
}
func (m *MatchingFunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchingFunction.Marshal(b, m, deterministic)
}
func (dst *MatchingFunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchingFunction.Merge(dst, src)
}
func (m *MatchingFunction) XXX_Size() int {
	return xxx_messageInfo_MatchingFunction.Size(m)
}
func (m *MatchingFunction) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchingFunction.DiscardUnknown(m)
}

var xxx_messageInfo_MatchingFunction proto.InternalMessageInfo

func (m *MatchingFunction) GetFunctionString() *wrappers.StringValue {
	if m != nil {
		return m.FunctionString
	}
	return nil
}

func init() {
	proto.RegisterType((*MatchingFunction)(nil), "google.ads.googleads.v0.common.MatchingFunction")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v0/common/matching_function.proto", fileDescriptor_matching_function_ced7df2e67441782)
}

var fileDescriptor_matching_function_ced7df2e67441782 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4b, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x4f, 0x4c, 0x29, 0xd6, 0x87, 0x30, 0x41, 0xac, 0x32, 0x03, 0xfd, 0xe4, 0xfc,
	0xdc, 0xdc, 0xfc, 0x3c, 0xfd, 0xdc, 0xc4, 0x92, 0xe4, 0x8c, 0xcc, 0xbc, 0xf4, 0xf8, 0xb4, 0xd2,
	0xbc, 0xe4, 0x92, 0xcc, 0xfc, 0x3c, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x39, 0x88, 0x62,
	0xbd, 0xc4, 0x94, 0x62, 0x3d, 0xb8, 0x3e, 0xbd, 0x32, 0x03, 0x3d, 0x88, 0x3e, 0x29, 0xa8, 0xbc,
	0x3e, 0x58, 0x75, 0x52, 0x69, 0x9a, 0x7e, 0x79, 0x51, 0x62, 0x41, 0x41, 0x6a, 0x51, 0x31, 0x44,
	0xbf, 0x52, 0x24, 0x97, 0x80, 0x2f, 0xd4, 0x68, 0x37, 0xa8, 0xc9, 0x42, 0xae, 0x5c, 0xfc, 0x30,
	0x5b, 0xe2, 0x8b, 0x4b, 0x8a, 0x32, 0xf3, 0xd2, 0x25, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0x64,
	0xa0, 0x56, 0xe8, 0xc1, 0x4c, 0xd3, 0x0b, 0x06, 0x4b, 0x87, 0x25, 0xe6, 0x94, 0xa6, 0x06, 0xf1,
	0xc1, 0x34, 0x41, 0x04, 0x9d, 0x4e, 0x33, 0x72, 0x29, 0x25, 0xe7, 0xe7, 0xea, 0xe1, 0x77, 0xa1,
	0x93, 0x28, 0xba, 0xfd, 0x01, 0x20, 0xc3, 0x03, 0x18, 0xa3, 0x5c, 0xa0, 0x1a, 0xd3, 0xf3, 0x73,
	0x12, 0xf3, 0xd2, 0xf5, 0xf2, 0x8b, 0xd2, 0xf5, 0xd3, 0x53, 0xf3, 0xc0, 0x56, 0xc3, 0x82, 0xa8,
	0x20, 0xb3, 0x18, 0x57, 0x88, 0x59, 0x43, 0xa8, 0x45, 0x4c, 0xcc, 0xee, 0x8e, 0x8e, 0xab, 0x98,
	0xe4, 0xdc, 0x21, 0x86, 0x39, 0xa6, 0x14, 0xeb, 0x41, 0x98, 0x20, 0x56, 0x98, 0x81, 0x9e, 0x33,
	0x58, 0xd9, 0x29, 0x98, 0x82, 0x18, 0xc7, 0x94, 0xe2, 0x18, 0xb8, 0x82, 0x98, 0x30, 0x83, 0x18,
	0x88, 0x82, 0x24, 0x36, 0xb0, 0xc5, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x1d, 0x10,
	0x51, 0xa9, 0x01, 0x00, 0x00,
}
