syntax = "proto3";

package envoy.config.filter.http.ext_authz.v2alpha;
option go_package = "v2alpha";

import "envoy/api/v2/core/grpc_service.proto";
import "envoy/api/v2/core/http_uri.proto";

// [#protodoc-title: External Authorization ]
// The external authorization service configuration
// :ref:`configuration overview <config_http_filters_ext_authz>`.

// External Authorization filter calls out to an external service over either:
//
//  1. gRPC Authorization API defined by :ref:`CheckRequest
//     <envoy_api_msg_service.auth.v2alpha.CheckRequest>`.
//  2. Raw HTTP Authorization server by passing the request headers to the service.
//
// A failed check will cause this filter to close the HTTP request normally with 403 (Forbidden),
// unless a different status code has been indicated in the authorization response.
message ExtAuthz {

  oneof services {
    // The external authorization gRPC service configuration.
    // The default timeout is set to 200ms by this filter.
    envoy.api.v2.core.GrpcService grpc_service = 1;

    // The external authorization HTTP service configuration.
    // The default timeout is set to 200ms by this filter.
    HttpService http_service = 3;
  }

  // The filter's behaviour in case the external authorization service does
  // not respond back. When it is set to true, Envoy will also allow traffic in case of
  // communication failure between authorization service and the proxy.
  // Defaults to false.
  bool failure_mode_allow = 2;
}

// External Authorization filter calls out to an upstream authorization server by passing the raw
// HTTP request headers to the server. This allows the authorization service to take a decision
// whether the request is authorized or not.
//
// A successful check allows the authorization service adding or overriding headers from the
// original request before dispatching it to the upstream. This is done by including the headers in
// the response sent back from the authorization service to the filter. Note that `Status`,
// `Method`, `Path` and `Content Length` response headers are automatically removed from this
// response by the filter. If other headers need be deleted, they should be specified in
// `response_headers_to_remove` field.
//
// A failed check will cause this filter to close the HTTP request normally with 403 (Forbidden),
// unless a different status code has been indicated by the authorization service via response
// headers. The HTTP service also allows the authorization filter to also pass data from the
// response body to the downstream client in case of a denied request.
message HttpService {
  // Sets the HTTP server URI which the authorization requests must be sent to.
  envoy.api.v2.core.HttpUri server_uri = 1;

  // Sets an optional prefix to the value of authorization request header `path`.
  string path_prefix = 2;

  // Sets a list of headers that should be not be sent *from the authorization server* to the
  // upstream.
  repeated string response_headers_to_remove = 3;
}
